// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
if (window.Telegram?.WebApp) {
    const tg = window.Telegram.WebApp;
    tg.ready();
    tg.expand(); // –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
    document.body.style.backgroundColor = tg.backgroundColor || '#ffffff';

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = tg.initDataUnsafe?.user;
    if (user) {
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', user.first_name, user.last_name);
        console.log('üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id);
        console.log('üåê –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.language_code);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        const supportedLanguages = ['ru', 'en', 'uz', 'kk', 'ky', 'tg'];
        if (user.language_code && supportedLanguages.includes(user.language_code)) {
            localStorage.setItem('selectedLanguage', user.language_code);
        }
    }

    console.log('‚úÖ Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} else {
    console.log('‚ÑπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram');
}

// –ù–∞–ª–æ–≥–æ–≤—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ª–µ—Ç
const taxBands = {
    '2025-26': {
        personalAllowance: 12570,
        basicRate: { min: 12571, max: 50270, rate: 0.20 },
        higherRate: { min: 50271, max: 125140, rate: 0.40 },
        additionalRate: { min: 125141, rate: 0.45 }
    },
    '2024-25': {
        personalAllowance: 12570,
        basicRate: { min: 12571, max: 50270, rate: 0.20 },
        higherRate: { min: 50271, max: 125140, rate: 0.40 },
        additionalRate: { min: 125141, rate: 0.45 }
    },
    '2023-24': {
        personalAllowance: 12570,
        basicRate: { min: 12571, max: 50270, rate: 0.20 },
        higherRate: { min: 50271, max: 125140, rate: 0.40 },
        additionalRate: { min: 125141, rate: 0.45 }
    },
    '2022-23': {
        personalAllowance: 12570,
        basicRate: { min: 12571, max: 50270, rate: 0.20 },
        higherRate: { min: 50271, max: 150000, rate: 0.40 },
        additionalRate: { min: 150001, rate: 0.45 }
    }
};

function calculateIncomeTax(income, taxYear) {
    const bands = taxBands[taxYear];
    let tax = 0;
    let breakdown = [];

    // –ù–µ–æ–±–ª–∞–≥–∞–µ–º—ã–π –º–∏–Ω–∏–º—É–º
    if (income <= bands.personalAllowance) {
        breakdown.push({
            range: `¬£0 - ¬£${bands.personalAllowance.toLocaleString()}`,
            rate: '0%',
            taxableAmount: income,
            tax: 0
        });
        return { totalTax: 0, breakdown };
    }

    let remainingIncome = income;

    // –ù–µ–æ–±–ª–∞–≥–∞–µ–º—ã–π –º–∏–Ω–∏–º—É–º
    breakdown.push({
        range: `¬£0 - ¬£${bands.personalAllowance.toLocaleString()}`,
        rate: '0%',
        taxableAmount: bands.personalAllowance,
        tax: 0
    });
    remainingIncome -= bands.personalAllowance;

    // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ 20%
    if (remainingIncome > 0) {
        const basicTaxableAmount = Math.min(remainingIncome, bands.basicRate.max - bands.personalAllowance);
        const basicTax = basicTaxableAmount * bands.basicRate.rate;
        tax += basicTax;

        breakdown.push({
            range: `¬£${bands.basicRate.min.toLocaleString()} - ¬£${bands.basicRate.max.toLocaleString()}`,
            rate: '20%',
            taxableAmount: basicTaxableAmount,
            tax: basicTax
        });

        remainingIncome -= basicTaxableAmount;
    }

    // –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 40%
    if (remainingIncome > 0) {
        const higherTaxableAmount = Math.min(remainingIncome, bands.higherRate.max - bands.basicRate.max);
        const higherTax = higherTaxableAmount * bands.higherRate.rate;
        tax += higherTax;

        breakdown.push({
            range: `¬£${bands.higherRate.min.toLocaleString()} - ¬£${bands.higherRate.max.toLocaleString()}`,
            rate: '40%',
            taxableAmount: higherTaxableAmount,
            tax: higherTax
        });

        remainingIncome -= higherTaxableAmount;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 45%
    if (remainingIncome > 0) {
        const additionalTax = remainingIncome * bands.additionalRate.rate;
        tax += additionalTax;

        breakdown.push({
            range: `¬£${bands.additionalRate.min.toLocaleString()}+`,
            rate: '45%',
            taxableAmount: remainingIncome,
            tax: additionalTax
        });
    }

    return { totalTax: tax, breakdown };
}

function formatCurrency(amount) {
    return new Intl.NumberFormat('en-GB', {
        style: 'currency',
        currency: 'GBP',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
    }).format(amount);
}

function displayResults(income, taxPaid, taxYear, monthsWorked, companyName, agentOperator) {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ª–æ–≥ –Ω–∞–ø—Ä—è–º—É—é —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    const { totalTax, breakdown } = calculateIncomeTax(income, taxYear);
    const refund = taxPaid - totalTax;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    const currentLang = localStorage.getItem('selectedLanguage') || 'ru';
    const notSpecifiedText = translations[currentLang]?.not_specified || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

    document.getElementById('summaryCompany').textContent = companyName || notSpecifiedText;
    document.getElementById('summaryAgent').textContent = agentOperator || notSpecifiedText;
    document.getElementById('summaryPeriod').textContent = `${monthsWorked} ${getMonthsText(monthsWorked)} (${taxYear})`;

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    document.getElementById('actualIncome').textContent = formatCurrency(income);
    document.getElementById('taxDue').textContent = formatCurrency(totalTax);
    document.getElementById('paidTax').textContent = formatCurrency(taxPaid);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞/–¥–æ–ø–ª–∞—Ç—ã
    const refundHighlight = document.getElementById('refundHighlight');
    const paymentItem = document.getElementById('paymentItem');
    const refundAmountElement = document.getElementById('refundAmount');
    const paymentAmountElement = document.getElementById('paymentAmount');

    if (refund > 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç
        refundHighlight.style.display = 'block';
        paymentItem.style.display = 'none';
        refundAmountElement.textContent = formatCurrency(refund);

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        refundAmountElement.style.animation = 'none';
        setTimeout(() => {
            refundAmountElement.style.animation = 'bounce 1s ease-out';
        }, 100);

    } else if (refund < 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–ª–∞—Ç—É
        refundHighlight.style.display = 'none';
        paymentItem.style.display = 'flex';
        paymentItem.classList.add('negative');
        paymentAmountElement.textContent = formatCurrency(Math.abs(refund));

    } else {
        // –ù–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –¥–æ–ø–ª–∞—Ç—ã
        refundHighlight.style.display = 'none';
        paymentItem.style.display = 'flex';
        paymentItem.classList.remove('positive', 'negative');
        paymentItem.querySelector('span:first-child').textContent = '–î–æ–ø–ª–∞—Ç–∞/–≤–æ–∑–≤—Ä–∞—Ç:';
        paymentAmountElement.textContent = formatCurrency(0);
    }

    // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–ª–æ–≥–∞
    const breakdownContainer = document.getElementById('taxBreakdown');
    breakdownContainer.innerHTML = '';

    breakdown.forEach(item => {
        if (item.taxableAmount > 0) {
            const div = document.createElement('div');
            div.className = 'breakdown-item';
            div.innerHTML = `
                <span>${item.range} (${item.rate})</span>
                <span>${formatCurrency(item.tax)}</span>
            `;
            breakdownContainer.appendChild(div);
        }
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    document.getElementById('results').classList.remove('hidden');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram
    sendResultToTelegram(income, totalTax, taxPaid, refund, monthsWorked, agentOperator);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    sendToGoogleSheets(income, taxPaid, refund, monthsWorked, agentOperator, companyName, taxYear);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–π –±–ª–æ–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è
    setTimeout(() => {
        const promoBlock = document.getElementById('taxServicePromo');
        promoBlock.style.display = 'block';
        promoBlock.style.animation = 'slideInUp 0.6s ease-out, pulse 2s infinite 1s';
    }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
}

function getMonthsText(months) {
    if (months === 1) return '–º–µ—Å—è—Ü';
    if (months >= 2 && months <= 4) return '–º–µ—Å—è—Ü–∞';
    return '–º–µ—Å—è—Ü–µ–≤';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
function parseCleanNumber(value) {
    if (!value) return 0;

    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    let cleanValue = value.toString().replace(/[^\d]/g, '');

    const result = parseInt(cleanValue);
    return isNaN(result) ? 0 : result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
function formatNumberInput(input) {
    const cursorPosition = input.selectionStart;
    const originalValue = input.value;

    // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã, –Ω–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    if (!originalValue || originalValue.trim() === '') {
        return;
    }

    const cleanValue = parseCleanNumber(originalValue);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0
    if (cleanValue > 0 && !isNaN(cleanValue)) {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
        const formattedValue = cleanValue.toLocaleString('en-US', {
            minimumFractionDigits: 0,
            maximumFractionDigits: 2
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if (input.value !== formattedValue && Math.abs(cleanValue - parseCleanNumber(input.value)) > 0.01) {
            input.value = formattedValue;

            // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
            const newPosition = Math.min(cursorPosition, formattedValue.length);
            setTimeout(() => {
                input.setSelectionRange(newPosition, newPosition);
            }, 0);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
document.getElementById('taxForm').addEventListener('submit', function (e) {
    e.preventDefault();

    const income = parseCleanNumber(document.getElementById('annualIncome').value);
    const taxPaid = parseCleanNumber(document.getElementById('taxPaid').value);
    const taxYear = document.getElementById('taxYear').value;
    const monthsWorked = parseInt(document.getElementById('monthsWorked').value);
    const companyName = document.getElementById('companyName').value.trim();
    const agentOperator = document.getElementById('agentOperator').value.trim();

    if (income <= 0 || taxPaid < 0) {
        const currentLang = localStorage.getItem('selectedLanguage') || 'ru';
        const errorMessages = {
            ru: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è',
            en: 'Please enter correct positive values',
            uz: 'Iltimos, to\'g\'ri musbat qiymatlarni kiriting',
            kk: '–î“±—Ä—ã—Å –æ“£ –º”ô–Ω–¥–µ—Ä–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑',
            ky: '–¢—É—É—Ä–∞ –æ“£ –º–∞–∞–Ω–∏–ª–µ—Ä–¥–∏ –∫–∏—Ä–≥–∏–∑–∏“£–∏–∑',
            tg: '–õ—É—Ç—Ñ–∞–Ω “õ–∏–º–∞—Ç“≥–æ–∏ –¥—É—Ä—É—Å—Ç–∏ –º—É—Å–±–∞—Ç –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥'
        };
        alert(errorMessages[currentLang] || errorMessages.ru);
        return;
    }

    if (!monthsWorked) {
        const currentLang = localStorage.getItem('selectedLanguage') || 'ru';
        const errorMessages = {
            ru: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ —Ä–∞–±–æ—Ç—ã',
            en: 'Please select the number of months worked',
            uz: 'Iltimos, ishlagan oylar sonini tanlang',
            kk: '–ñ“±–º—ã—Å —ñ—Å—Ç–µ–≥–µ–Ω –∞–π–ª–∞—Ä —Å–∞–Ω—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑',
            ky: '–ò—à—Ç–µ–≥–µ–Ω –∞–π–ª–∞—Ä–¥—ã–Ω —Å–∞–Ω—ã–Ω —Ç–∞–Ω–¥–∞“£—ã–∑',
            tg: '–õ—É—Ç—Ñ–∞–Ω —à—É–º–æ—Ä–∞–∏ –º–æ“≥“≥–æ–∏ –∫–æ—Ä–∏—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥'
        };
        alert(errorMessages[currentLang] || errorMessages.ru);
        return;
    }

    displayResults(income, taxPaid, taxYear, monthsWorked, companyName, agentOperator);
});

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
const incomeInput = document.getElementById('annualIncome');
const taxPaidInput = document.getElementById('taxPaid');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function addFormatting(input) {
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
    input.addEventListener('blur', function () {
        formatNumberInput(input);
    });

    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    input.addEventListener('keypress', function (e) {
        const allowedChars = /[0-9\s]/;
        if (!allowedChars.test(e.key) && !['Backspace', 'Delete', 'Tab', 'Enter', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {
            e.preventDefault();
        }
    });
}

addFormatting(incomeInput);
addFormatting(taxPaidInput);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
function hideResults() {
    const resultsDiv = document.getElementById('results');
    const promoBlock = document.getElementById('taxServicePromo');

    if (resultsDiv && !resultsDiv.classList.contains('hidden')) {
        resultsDiv.classList.add('hidden');
    }

    if (promoBlock) {
        promoBlock.style.display = 'none';
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
document.getElementById('annualIncome').addEventListener('input', hideResults);
document.getElementById('taxPaid').addEventListener('input', hideResults);
document.getElementById('taxYear').addEventListener('change', hideResults);
document.getElementById('monthsWorked').addEventListener('change', hideResults);
document.getElementById('companyName').addEventListener('input', hideResults);
document.getElementById('agentOperator').addEventListener('change', hideResults);

function autoCalculate() {
    const income = parseCleanNumber(document.getElementById('annualIncome').value);
    const taxPaid = parseCleanNumber(document.getElementById('taxPaid').value);
    const taxYear = document.getElementById('taxYear').value;
    const monthsWorked = parseInt(document.getElementById('monthsWorked').value);
    const companyName = document.getElementById('companyName').value.trim();
    const agentOperator = document.getElementById('agentOperator').value.trim();

    if (income > 0 && taxPaid >= 0 && monthsWorked) {
        displayResults(income, taxPaid, taxYear, monthsWorked, companyName, agentOperator);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Telegram
async function sendResultToTelegram(income, totalTax, taxPaid, refund, monthsWorked, agentOperator) {
    try {
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
        const TELEGRAM_BOT_TOKEN = '7558545607:AAGN832lBrc0nnRSzDLEVD8BI5otL9Oi-2c';
        const TELEGRAM_CHAT_ID = '-1002925530891'; // –ü–æ–ø—Ä–æ–±—É–µ–º –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID

        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram...');
        console.log('üì± Chat ID:', TELEGRAM_CHAT_ID);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        const currentLang = localStorage.getItem('selectedLanguage') || 'ru';

        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = generateInterestingMessage(income, totalTax, taxPaid, refund, monthsWorked, agentOperator, currentLang);

        console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ:', message);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        console.log('üåê URL:', telegramUrl);

        const requestBody = {
            chat_id: TELEGRAM_CHAT_ID,
            text: message,
            disable_web_page_preview: true,
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: "üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–≤–æ–π –Ω–∞–ª–æ–≥",
                        url: "https://t.me/ZoirUKBot/SoliqHisoblagich"
                    }
                ]]
            }
        };

        console.log('üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', requestBody);

        const response = await fetch(telegramUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody)
        });

        console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);

        const responseData = await response.json();
        console.log('üìÑ –û—Ç–≤–µ—Ç –æ—Ç Telegram:', responseData);

        if (response.ok) {
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram');
        } else {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', response.status, responseData);

            // –ï—Å–ª–∏ Chat ID –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–µ–º —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
            if (responseData.error_code === 400 && responseData.description.includes('chat not found')) {
                console.log('üîÑ –ü—Ä–æ–±—É–µ–º —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º Chat ID...');
                const negativeChatId = `-${TELEGRAM_CHAT_ID}`;

                const retryResponse = await fetch(telegramUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        chat_id: negativeChatId,
                        text: message,
                        disable_web_page_preview: true,
                        reply_markup: {
                            inline_keyboard: [[
                                {
                                    text: "üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–≤–æ–π –Ω–∞–ª–æ–≥",
                                    url: "https://t.me/ZoirUKBot/SoliqHisoblagich"
                                }
                            ]]
                        }
                    })
                });

                const retryData = await retryResponse.json();
                console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç:', retryData);
            }
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ —è–∑—ã–∫–∞
function getLanguageFlag(lang) {
    const flags = {
        ru: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
        en: 'üá¨üáß English',
        uz: 'üá∫üáø O\'zbek',
        kk: 'üá∞üáø “ö–∞–∑–∞“õ—à–∞',
        ky: 'üá∞üá¨ –ö—ã—Ä–≥—ã–∑—á–∞',
        tg: 'üáπüáØ –¢–æ“∑–∏–∫”£'
    };
    return flags[lang] || flags.ru;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –±–æ—Ç–∞ (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏)
async function testTelegramBot() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞...');

    const TELEGRAM_BOT_TOKEN = '7558545607:AAGN832lBrc0nnRSzDLEVD8BI5otL9Oi-2c';

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    try {
        const botInfoUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMe`;
        const botResponse = await fetch(botInfoUrl);
        const botData = await botResponse.json();

        console.log('ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:', botData);

        if (botData.ok) {
            console.log('‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω:', botData.result.username);
        } else {
            console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–æ—Ç–æ–º:', botData);
            return;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–æ—Ç–∞:', error);
        return;
    }

    // –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await sendResultToTelegram(15000, 1500, 1200, 300, 6, 'Test Agent');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Chat ID
async function getChatId() {
    const TELEGRAM_BOT_TOKEN = '7558545607:AAGN832lBrc0nnRSzDLEVD8BI5otL9Oi-2c';

    try {
        const updatesUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getUpdates`;
        const response = await fetch(updatesUrl);
        const data = await response.json();

        console.log('üì® –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', data);

        if (data.ok && data.result.length > 0) {
            data.result.forEach((update, index) => {
                if (update.message) {
                    console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ ${index + 1}:`);
                    console.log(`   Chat ID: ${update.message.chat.id}`);
                    console.log(`   –¢–∏–ø —á–∞—Ç–∞: ${update.message.chat.type}`);
                    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${update.message.chat.title || update.message.chat.first_name}`);
                }
            });
        } else {
            console.log('‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É —Å –±–æ—Ç–æ–º.');
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Chat ID:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
function generateInterestingMessage(income, totalTax, taxPaid, refund, monthsWorked, agentOperator, currentLang) {
    const isRefund = refund > 0;
    const resultAmount = Math.abs(refund);

    const message = `üïµÔ∏è‚Äç‚ôÇÔ∏è Anonim foydalanuvchi soliq qaytarilishi hisob-kitobini oldi

üìà Tafsilotlar:
‚Ä¢ Daromad: ¬£${income.toLocaleString()}
‚Ä¢ Ushlab qolingan soliq: ¬£${taxPaid.toLocaleString()}
‚Ä¢ Davr: ${monthsWorked} –º–µ—Å—è—Ü–µ–≤
‚Ä¢ Agent: ${agentOperator || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üí∞ Natija: ${isRefund ? `Soliq qaytarilishi ‚Äî ¬£${resultAmount.toLocaleString()}` : `Qo'shimcha to'lov ‚Äî ¬£${resultAmount.toLocaleString()}`}

‚ö†Ô∏è Muhim: Bu hisob-kitob faqat taxminiy. Aniq summa HMRC (Buyuk Britaniya Soliq Xizmati) tomonidan tasdiqlanadi.

üì¢ Yordam kerakmi? White Tax Returns ‚Äî rasmiy ro‚Äòyxatdan o‚Äòtgan soliq agentligi, Fruitful Jobs va Agri HR operatorlarining rasmiy buxgalteriya bo‚Äòlimidir.

üìé Ariza topshirish uchun: üëâ whitetax.site/uzbekistan`;

    return message;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
async function sendToGoogleSheets(income, taxPaid, refund, monthsWorked, agentOperator, companyName, taxYear) {
    try {
        // URL –≤–∞—à–µ–≥–æ Google Apps Script –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const GOOGLE_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbxnTi13NXwBuRp1iwyi8osomH-fPlX0LSz6iFseAnUbUK2wCzhgEuyyBqSW6WUe-hPCuw/exec';

        const data = {
            income: income,
            taxPaid: taxPaid,
            refund: refund,
            monthsWorked: monthsWorked,
            agentOperator: agentOperator || '–ù–µ —É–∫–∞–∑–∞–Ω',
            companyName: companyName || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
            taxYear: taxYear,
            isRefund: refund > 0
        };

        console.log('üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets...', data);

        const response = await fetch(GOOGLE_SCRIPT_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
        });

        const result = await response.json();

        if (result.success) {
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Google Sheets');
        } else {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Google Sheets:', result.error);
        }

    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Google Sheets:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function testQuickMessage() {
    console.log('üß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    await sendResultToTelegram(25000, 2500, 3000, -500, 8, 'Test Agent');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Google Sheets
async function testGoogleSheets() {
    console.log('üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º Google Sheets...');
    await sendToGoogleSheets(25000, 2500, -500, 8, 'Test Agent', 'Test Company', '2024-25');
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
window.testTelegramBot = testTelegramBot;
window.getChatId = getChatId;
window.testQuickMessage = testQuickMessage;
window.testGoogleSheets = testGoogleSheets;
